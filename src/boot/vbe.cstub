#include <commonstrings.h>
#include <cstring>
#include <kernel.h>
#include <phymemmgmt.h>
#include <terminal.h>
#include <vbe.h>
#include <virtualmemmgmt.h>

static const char* const switchingModeStr = "Switching to graphical video mode ";

bool setupGraphicalVideoMode() {
	// TODO: Go through all video modes and select the mode which has linear frame buffer
	// with the maximum width and height and bitsPerPixel preferrably 32-bit
	// For now select 1024x768x32 mode
	uint16_t *modeNumbers = (uint16_t*)infoTable->vbeModeNumbersLocation;
	VBEModeInfo *modes = (VBEModeInfo*)(uint64_t)infoTable->vbeModesInfoLocation;
	size_t selectedMode = SIZE_MAX;
	for (size_t i = 0; i < infoTable->vbeModesInfoCount; ++i) {
		// if (
		// 	selectedMode == SIZE_MAX ||
		// 	(
		// 		modes[i].attributes & VBE_LINEAR_FRAME_BUFFER_AVAILABLE &&
		// 		modes[i].width > modes[selectedMode].width &&
		// 		modes[i].height > modes[selectedMode].height &&
		// 		modes[i].bitsPerPixel > modes[selectedMode].bitsPerPixel
		// 	)
		// ) {
		// 	selectedMode = i;
		// }
		if (
			modes[i].attributes & VBE_LINEAR_FRAME_BUFFER_AVAILABLE &&
			modes[i].width == 1024 &&
			modes[i].height == 768 &&
			modes[i].bitsPerPixel == 32
		) {
			selectedMode = i;
		}
	}
	terminalPrintString(switchingModeStr, strlen(switchingModeStr));
	terminalPrintHex(&modeNumbers[selectedMode], 2);
	terminalPrintChar(' ');
	terminalPrintDecimal(modes[selectedMode].width);
	terminalPrintChar('x');
	terminalPrintDecimal(modes[selectedMode].height);
	terminalPrintChar('x');
	terminalPrintDecimal(modes[selectedMode].bitsPerPixel);
	terminalPrintString(ellipsisStr, strlen(ellipsisStr));

	// Map the linear buffer of selected mode to kernel address space
	size_t bufferSize = modes[selectedMode].width * modes[selectedMode].height * modes[selectedMode].bitsPerPixel / 8;
	size_t bufferPageCount = bufferSize / pageSize;
	if (bufferPageCount * pageSize != bufferSize) {
		++bufferPageCount;
	}
	PageRequestResult result = requestVirtualPages(bufferPageCount, MEMORY_REQUEST_KERNEL_PAGE | MEMORY_REQUEST_CONTIGUOUS);
	if (
		result.address == INVALID_ADDRESS ||
		result.allocatedCount != bufferPageCount ||
		!mapVirtualPages(result.address, (void*)(uint64_t)modes[selectedMode].frameBuffer, bufferPageCount, MEMORY_REQUEST_CACHE_DISABLE)
	) {
		terminalPrintString(failedStr, strlen(failedStr));
		terminalPrintChar('\n');
		return false;
	}

	for (size_t i = 0; i < 8; ++i) {
		for (size_t j = 0; j < 16; ++j) {
			uint32_t *pixelOffset = (uint32_t*)((uint64_t)result.address + j * modes[selectedMode].pitch + i * (modes[selectedMode].bitsPerPixel / 8));
			*pixelOffset = 0x00ffff;
		}
	}

	return true;
}
