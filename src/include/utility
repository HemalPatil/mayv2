#pragma once

#include <type_traits>

namespace std {
	// Forward an lvalue
	template<typename Type>
	constexpr Type&& forward(typename std::remove_reference<Type>::type& type) noexcept {
		return static_cast<Type&&>(type);
	}

	// Forward an rvalue
	template<typename Type>
	constexpr Type&& forward(typename std::remove_reference<Type>::type&& type) noexcept {
		static_assert(
			!std::is_lvalue_reference<Type>::value,
			"std::forward must not be used to convert an rvalue to an lvalue"
		);
		return static_cast<Type&&>(type);
	}
}
